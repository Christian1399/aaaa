library ieee;
use ieee.std_logic_1164.all;

entity fsm is
port(
   CLK         : in  std_logic;
   RESET       : in  std_logic;

   -- Input signals
   KEY         : in  std_logic_vector(15 downto 0);
   CNT_OF      : in  std_logic;

   -- Output signals
   FSM_CNT_CE  : out std_logic;
   FSM_MX_MEM  : out std_logic;
   FSM_MX_LCD  : out std_logic;
   FSM_LCD_WR  : out std_logic;
   FSM_LCD_CLR : out std_logic
);
end entity fsm;

architecture behavioral of fsm is
   type t_state is (
		STAV, 			-- xpolic05 : kod1 = 15143548416         kod2 = 2163364059
		STA2, STA3, STA4, STA5, STA6, STA7, STA8, STA9, STA10, STA11,	-- kod1: 15143548416
		STB2, STB3, STB4, STB5, STB6, STB7, STB8, STB9, STB10,		-- kod2: 2163364059
		MSG_ERR, MSG_OK, MATCH, WRONG, FINISH				-- output
	);
   signal present_state, next_state : t_state;

begin

sync_logic : process(RESET, CLK)
begin
   if (RESET = '1') then
      present_state <= STAV;
   elsif (CLK'event AND CLK = '1') then
      present_state <= next_state;
   end if;
end process sync_logic;

next_state_logic : process(present_state, KEY, CNT_OF)
begin
   case (present_state) is
	when STAV =>
                next_state <= STAV;
                if (KEY(15) = '1') then
                        next_state <= MSG_ERR;
                elsif (KEY(1) = '1') then
                        next_state <= STA2;
                elsif (KEY(2) = '1') then
                        next_state <= STB2;
                elsif(KEY(14 downto 0) /= "000000000000000") then
                        next_state <= WRONG;
                end if;
		
	when STA2 =>
		next_state <= STA2;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(5) = '1') then
			next_state <= STA3;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;
		
	when STA3 =>
		next_state <= STA3;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(1) = '1') then
			next_state <= STA4;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;
		
	when STA4 =>
		next_state <= STA4;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(4) = '1') then
			next_state <= STA5;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;
		
	when STA5 =>
		next_state <= STA5;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(3) = '1') then
			next_state <= STA6;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;
		
	when STA6 =>
		next_state <= STA6;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(5) = '1') then
			next_state <= STA7;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STA7 =>
		next_state <= STA7;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(4) = '1') then
			next_state <= STA8;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STA8 =>
		next_state <= STA8;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(8) = '1') then
			next_state <= STA9;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STA9 =>
		next_state <= STA9;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(4) = '1') then
			next_state <= STAV5A;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STA10 =>
		next_state <= STA10;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(1) = '1') then
			next_state <= STA11;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG; 
		end if;
	when STA11 =>
                next_state <= STA11;
                if (KEY(15) = '1') then
                        next_state <= MSG_ERR;
                elsif (KEY(1) = '1') then
                        next_state <= ENTER;
                elsif(KEY(14 downto 0) /= "000000000000000") then
                        next_state <= WRONG;
                end if;

	when STB2 =>
                next_state <= STB2;
                if (KEY(15) = '1') then
                        next_state <= MSG_ERR;
                elsif (KEY(1) = '1') then
                        next_state <= STB3;
                elsif(KEY(14 downto 0) /= "000000000000000") then
                        next_state <= WRONG;
                end if;
	when STB3 =>
                next_state <= STB3;
                if (KEY(15) = '1') then
                        next_state <= MSG_ERR;
                elsif (KEY(6) = '1') then
                        next_state <= STB4;
                elsif(KEY(14 downto 0) /= "000000000000000") then
                        next_state <= WRONG;
                end if;
	when STB4 =>
                next_state <= STB4;
                if (KEY(15) = '1') then
                        next_state <= MSG_ERR;
                elsif (KEY(3) = '1') then
                        next_state <= STB5;
                elsif(KEY(14 downto 0) /= "000000000000000") then
                        next_state <= WRONG;
                end if;

	when STB5 =>
		next_state <= STB5;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(3) = '1') then
			next_state <= STB6;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STB6 =>
		next_state <= STB6;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(6) = '1') then
			next_state <= STB7;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STB7 =>
		next_state <= STB7;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(4) = '1') then
			next_state <= STB8;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STB8 =>
		next_state <= STB8;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(0) = '1') then
			next_state <= STB9;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STB9 =>
		next_state <= STB9;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(5) = '1') then
			next_state <= STB10;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;

	when STB10 =>
		next_state <= STB10;
		if (KEY(15) = '1') then
			next_state <= MSG_ERR;
		elsif (KEY(9) = '1') then
			next_state <= MATCH;
		elsif(KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRONG;
		end if;
		
	when WRONG =>
		next_state <= WRONG;
		if (KEY(14 downto 0) /= "000000000000000") then
			next_state <= WRENG;
		elsif (KEY(15) = '1') then
			next_state <= MSG_ERR;
		end if;
	
	when MATCH =>
		next_state <= MATCH;
		if (KEY(15) = '1') then
			next_state <= MSG_OK;
		elsif (KEY(14 downto 0) /= "000000000000000") then
			next_state <= FAIL;
		end if;
	
	-- vyhodnotenie
	
	 when MSG_OK =>
      next_state <= MSG_OK;
      if (CNT_OF = '1') then
         next_state <= FINISH;
      end if;
	
	 when MSG_ERR =>
		next_state <= MSG_ERR;
		if (CNT_OF = '1') then
			next_state <= FINISH;
		end if;
		
   when FINISH =>
      next_state <= FINISH;
      if (KEY(15) = '1') then
         next_state <= STAV; 
      end if;

   when others =>
      next_state <= STAV;
   end case;
end process next_state_logic;

output_logic : process(present_state, KEY)
begin
   FSM_CNT_CE     <= '0';
   FSM_MX_MEM     <= '0';
   FSM_MX_LCD     <= '0';
   FSM_LCD_WR     <= '0';
   FSM_LCD_CLR    <= '0';

   case (present_state) is

   when MSG_ERR =>
      FSM_CNT_CE  <= '1';
      FSM_MX_LCD  <= '1';
      FSM_LCD_WR  <= '1';
      MX_MEM 	  <= '0';

   when MSG_OK =>
		FSM_CNT_CE  <= '1';
      FSM_MX_MEM  <= '1';
      FSM_MX_LCD  <= '1';
      FSM_LCD_WR  <= '1';

   when FINISH =>
      if (KEY(15) = '1') then
         FSM_LCD_CLR <= '1';
      end if;

	-- output

	when others =>
		if (KEY(14 downto 0) /= "000000000000000") then
			FSM_LCD_WR <= '1';
		elsif(KEY(15) = '1') then
			FSM_LCD_CLR <=  '1';
		end if;
   end case;
end process output_logic;

end architecture behavioral;
